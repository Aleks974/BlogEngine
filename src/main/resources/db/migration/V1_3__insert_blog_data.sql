-- roles

INSERT INTO roles (name)
VALUES ('ROLE_ADMIN'),
('ROLE_USER');

-- users

INSERT INTO users (is_moderator, reg_time, name, email, password) -- password1, password2, password3
VALUES (true, DATE_SUB(NOW(), INTERVAL 4 DAY), 'Aleksandr Ivanov', 'a@aa.ru', '$2a$10$hL.jlZnWZwRmoj3FY1QTQOdys3TozswyyS0QHuhf4hFqADb0FxEVe'),
(false, DATE_SUB(NOW(), INTERVAL 3 DAY), 'Petr Dmitriev', 'b@bb.ru', '$2a$10$pdHVkGoeVf.IjmXTkv3Bn.FKkrCdTDJMDOgLkZGEwcGZ.etAIO0UK'),
(false, DATE_SUB(NOW(), INTERVAL 2 DAY), 'Ivan Egorov', 'c@cc.ru', '$2a$10$5bPwiO2OSIoU.LIc8qRi1extHsYg.uzy3FfJjCnMYepdPu.ZiDo/m');

-- users_roles

INSERT INTO users_roles (user_id, role_id)
VALUES (1, 1),
(2, 2),
(3, 2);

-- posts

INSERT INTO posts (is_active, moderation_status, moderator_id, user_id, time, title, text, announce, view_count)
VALUES (true, 'NEW', NULL, 2, DATE_SUB(NOW(), INTERVAL 1 DAY), 'Show Hibernate/JPA SQL Statements from Spring Boot', '<article id="post-31899" class="clearfix post-31899 post type-post status-publish format-standard has-post-thumbnail hentry category-logging category-spring-boot category-spring-persistence tag-copy-edit" role="article" itemscope itemtype="http://schema.org/BlogPosting"><section class="post-content clearfix" itemprop="articleBody"><div class="wwsgd_new_visitor" style="display:none;"></div><div class="wwsgd_return_visitor" style="display:none;"></div><h2 data-id="overview"><strong>1. Overview </strong></h2><div class="bd-anchor" id="overview"></div><p>Spring <a href="/spring-jdbc-jdbctemplate">JDBC</a> and <a href="/the-persistence-layer-with-spring-data-jpa">JPA</a> provide abstractions over native JDBC APIs, allowing developers to do away with native SQL queries. However, we often need to see those auto-generated SQL queries and the order in which they were executed for debugging purposes.</p><p>In this quick tutorial, we\'re going to look at different ways of logging these SQL queries in Spring Boot.</p><section class="further-reading-posts"><div class="fr-header"><h2>Further reading:</h2></div><div class="fr-wrap"><div class="fr-item"><h2><a href="/spring-jdbc-jdbctemplate">Spring JDBC</a></h2><div class="ex">Introduction to the Spring JDBC abstraction, with example on how to use the JbdcTempalte and NamedParameterJdbcTemplate APIs.</div><div class="ex"><a href="/spring-jdbc-jdbctemplate">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/the-persistence-layer-with-spring-data-jpa">Introduction to Spring Data JPA</a></h2><div class="ex">Introduction to Spring Data JPA with Spring 4 - the Spring config, the DAO, manual and generated queries and transaction management.</div><div class="ex"><a href="/the-persistence-layer-with-spring-data-jpa">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/hibernate-interceptor">Hibernate Interceptors</a></h2><div class="ex">A quick and practical guide to creating Hibernate interceptors.</div><div class="ex"><a href="/hibernate-interceptor">Read more</a> &rarr;</div></div></div></section><h2 data-id="loggingJpaQueries"><strong>2. Logging JPA Queries</strong></h2><div class="bd-anchor" id="loggingJpaQueries"></div><h3 data-id="1-to-standard-output"><strong>2.1. To Standard Output</strong></h3><div class="bd-anchor" id="1-to-standard-output"></div><p>The simplest way to dump the queries to standard out is to add the following to <em>application.properties</em>:</p><pre><code class="language-bash">spring.jpa.show-sql=true</code></pre><p>To beautify or pretty print the SQL, we can add:</p><pre><code class="language-bash">spring.jpa.properties.hibernate.format_sql=true</code></pre><p>While this is extremely simple,<strong> it\'s not recommended</strong>, as it directly unloads everything to standard output without any optimizations of a logging framework.</p><div class=\'code-block code-block-2\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __728x90" id="baeldung_leaderboard_mid_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_1", slotId: "baeldung_leaderboard_mid_1" });  </script></div></div><p>Moreover, <strong>it doesn\'t log the parameters of prepared statements.</strong></p><h3 data-id="2-via-loggers"><strong>2.2. Via Loggers</strong></h3><div class="bd-anchor" id="2-via-loggers"></div><p>Now let\'s see how we can log the SQL statements by configuring loggers in the properties file:</p><pre><code class="language-bash">logging.level.org.hibernate.SQL=DEBUGlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE</code></pre><p>The first line logs the SQL queries, and the second statement logs the prepared statement parameters.</p><p>The pretty print property will work in this configuration as well.</p><p>By setting these properties, <strong>logs will be sent to the configured appender.</strong> By default, Spring Boot uses <em>logback</em> with a standard out appender.</p><div class=\'code-block code-block-3\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_2", slotId: "baeldung_leaderboard_mid_2" });  </script></div></div><h2 data-id="loggingJdbcTemplate"><strong>3. Logging <em>JdbcTemplate</em> Queries</strong></h2><div class="bd-anchor" id="loggingJdbcTemplate"></div><p>To configure statement logging when using <em>JdbcTemplate</em>, we need the following properties:</p><pre><code class="language-bash">logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUGlogging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE</code></pre><p>Similar to the JPA logging configuration, the first line is for logging statements and the second is to log parameters of prepared statements.</p><h2 data-id="howDoesItWork"><strong>4. How Does It Work?</strong></h2><div class="bd-anchor" id="howDoesItWork"></div><p><strong>The Spring/Hibernate classes, </strong>which generate SQL statements and set the parameters, <strong>already contain the code for logging them.</strong></p><p>However, the level of those log statements is set to <em>DEBUG</em> and <em>TRACE</em> respectively, which is lower than the default level in Spring Boot &#8212; <em>INFO</em>.</p><p>By adding these properties, we are just setting those loggers to the required level.</p><div class=\'code-block code-block-4\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_3", slotId: "baeldung_leaderboard_mid_3" });  </script></div></div><h2 data-id="conclusion"><strong>5. Conclusion</strong></h2><div class="bd-anchor" id="conclusion"></div><p>In this short article, we\'ve looked at the ways to log SQL queries in Spring Boot.</p><p>If we choose to <a href="https://logback.qos.ch/manual/appenders.html">configure multiple appenders</a>, we can also separate SQL statements and other log statements into different log files to keep things clean.</p><span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;"></span><div class=\'after-post-widgets\'><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="after-post-content-widget"><span style="display:none;">Persistence bottom</span> <div class="textwidget"><div class="short_box short_end"><strong>Get started with Spring Data JPA through the reference <em>Learn Spring Data JPA</em> course:</strong><strong><a href="/learn-spring-data-jpa-course#table">&gt;&gt; CHECK OUT THE COURSE</a></strong></div></div></div></div><span style="display:none" class="tl-placeholder-f-type-post_footer"></span></section><div>Source: <a href="https://www.baeldung.com/sql-logging-spring-boot">https://www.baeldung.com/sql-logging-spring-boot</a></div></article>', 'JPA provide abstractions over native JDBC APIs, allowing developers to do away with native SQL queries', 0),
(true, 'ACCEPTED', 1, 2, DATE_SUB(NOW(), INTERVAL 2 DAY), 'Many-To-Many Relationship in JPA', '<article id="post-45364" class="clearfix post-45364 post type-post status-publish format-standard has-post-thumbnail hentry category-persistence tag-copy-edit tag-jpa" role="article" itemscope itemtype="http://schema.org/BlogPosting"><section class="post-content clearfix" itemprop="articleBody"><h2 data-id="overview">1. Overview </h2><div class="bd-anchor" id="overview"></div><p>In this tutorial, we\'ll see multiple ways to <strong>deal with many-to-many relationships using JPA.</strong></p><p>We\'ll use a model of students, courses, and various relationships between them.</p><p>For the sake of simplicity, in the code examples, we\'ll only show the attributes and JPA configuration that\'s related to the many-to-many relationships.</p><section class="further-reading-posts"><div class="fr-header"><h2>Further reading:</h2></div><div class="fr-wrap"><div class="fr-item"><h2><a href="/jpa-entity-table-names">Mapping Entity Class Names to SQL Table Names with JPA</a></h2><div class="ex">Learn how table names are generated by default and how to override that behavior.</div><div class="ex"><a href="/jpa-entity-table-names">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/jpa-cascade-types">Overview of JPA/Hibernate Cascade Types</a></h2><div class="ex">A quick and practical overview of JPA/Hibernate Cascade Types.</div><div class="ex"><a href="/jpa-cascade-types">Read more</a> &rarr;</div></div></div></section><h2 data-id="basic-many-to-many">2. Basic Many-to-Many</h2><div class="bd-anchor" id="basic-many-to-many"></div><h3 data-id="1-modeling-a-many-to-many-relationship">2.1. Modeling a Many-to-Many Relationship</h3><div class="bd-anchor" id="1-modeling-a-many-to-many-relationship"></div><p><strong>A relationship is a connection between two types of entities. In the case of a many-to-many relationship, both sides can relate to multiple instances of the other side.</strong></p><p>Note that it\'s possible for entity types to be in a relationship with themselves. Think about the example of modeling family trees: Every node is a person, so if we talk about the parent-child relationship, both participants will be a person.</p><div class=\'code-block code-block-2\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __728x90" id="baeldung_leaderboard_mid_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_1", slotId: "baeldung_leaderboard_mid_1" });  </script></div></div><p>However, it doesn\'t make such a difference whether we talk about a relationship between single or multiple entity types. Since it\'s easier to think about relationships between two different entity types, we\'ll use that to illustrate our cases.</p><p>Let\'s take the example of students marking the courses they like.</p><p>A student can like <strong>many</strong> courses, and <strong>many</strong> students can like the same course:</p><a href="/wp-content/uploads/2018/11/simple-er.png"><img loading="lazy" width="442" height="62" class="alignnone size-full wp-image-45367" src="https://www.baeldung.com/wp-content/uploads/2018/11/simple-er.png" alt="" srcset="https://www.baeldung.com/wp-content/uploads/2018/11/simple-er.png 442w, https://www.baeldung.com/wp-content/uploads/2018/11/simple-er-300x42.png 300w, https://www.baeldung.com/wp-content/uploads/2018/11/simple-er-100x14.png 100w" sizes="(max-width: 442px) 100vw, 442px" /></a><p>As we know, in RDBMSs we can create relationships with foreign keys. Since both sides should be able to reference the other, <strong>we need to create a separate table to hold the foreign keys</strong>:</p><a href="/wp-content/uploads/2018/11/simple-model-updated.png"><img class="alignnone size-full wp-image-45369" src="https://www.baeldung.com/wp-content/uploads/2018/11/simple-model-updated.png" alt="" /></a><p>Such a table is called a <strong>join table.</strong> In a join table, the combination of the foreign keys will be its composite primary key.</p><div class=\'code-block code-block-3\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_2", slotId: "baeldung_leaderboard_mid_2" });  </script></div></div><h3 data-id="2-implementation-in-jpa">2.2. Implementation in JPA</h3><div class="bd-anchor" id="2-implementation-in-jpa"></div><p><strong>Modeling a many-to-many relationship with POJOs</strong> is easy. We should <strong>include a <em>Collection</em> in both classes</strong>, which contains the elements of the others.</p><p>After that, we need to mark the class with <em>@Entity</em> and the primary key with <em>@Id</em> to make them proper JPA entities.</p><p>Also, we should configure the relationship type. So, <strong>we mark the collections with <em>@ManyToMany</em></strong> annotations:</p><pre><code class="language-java">@Entityclass Student {    @Id    Long id;    @ManyToMany    Set&lt;Course&gt; likedCourses;    // additional properties    // standard constructors, getters, and setters}@Entityclass Course {    @Id    Long id;    @ManyToMany    Set&lt;Student&gt; likes;    // additional properties    // standard constructors, getters, and setters}</code></pre><p>Additionally, we have to configure how to model the relationship in the RDBMS.</p><p>The owner side is where we configure the relationship. We\'ll use the <em>Student</em> class.</p><div class=\'code-block code-block-4\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_3", slotId: "baeldung_leaderboard_mid_3" });  </script></div></div><p><strong>We can do this with the <em>@JoinTable</em> annotation in the <em>Student</em> class.</strong> We provide the name of the join table (<em>course_like</em>) as well as the foreign keys with the <em>@JoinColumn</em> annotations. The <em>joinColumn</em> attribute will connect to the owner side of the relationship, and the <em>inverseJoinColumn</em> to the other side:</p><pre><code class="language-java">@ManyToMany@JoinTable(  name = &quot;course_like&quot;,  joinColumns = @JoinColumn(name = &quot;student_id&quot;),  inverseJoinColumns = @JoinColumn(name = &quot;course_id&quot;))Set&lt;Course&gt; likedCourses;</code></pre><p>Note that using <em>@JoinTable</em> or even <em>@JoinColumn</em> isn\'t required. JPA will generate the table and column names for us. However, the strategy JPA uses won\'t always match the naming conventions we use. So, we need the possibility to configure table and column names.</p><p><strong>On the target side, we only have to provide the name of the field, which maps the relationship.</strong></p><p>Therefore, we set the <em>mappedBy</em> attribute of the <em>@ManyToMany</em> annotation in the <em>Course</em> class:</p><pre><code class="language-java">@ManyToMany(mappedBy = &quot;likedCourses&quot;)Set&lt;Student&gt; likes;</code></pre><p>Keep in mind that since <strong>a many-to-many relationship doesn\'t have an owner side in the database</strong>, we could configure the join table in the <em>Course</em> class and reference it from the <em>Student </em>class.</p><h2 data-id="many-to-many-using-a-composite-key">3. Many-to-Many Using a Composite Key</h2><div class="bd-anchor" id="many-to-many-using-a-composite-key"></div><h3 data-id="1-modeling-relationship-attributes">3.1. Modeling Relationship Attributes</h3><div class="bd-anchor" id="1-modeling-relationship-attributes"></div><p>Let\'s say we want to let students rate the courses. A student can rate any number of courses, and any number of students can rate the same course. Therefore, it\'s also a many-to-many relationship.</p><p>What makes this example a bit more complicated is that <strong>there is more to the rating relationship than the fact that it exists. We need to store the rating score the student gave on the course.</strong></p><p>Where can we store this information? We can\'t put it in the <em>Student</em> entity since a student can give different ratings to different courses. Similarly, storing it in the <em>Course</em> entity wouldn\'t be a good solution either.</p><div class=\'code-block code-block-5\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_1", slotId: "baeldung_incontent_1" });  </script></div></div><p>This is a situation when <strong>the relationship itself has an attribute.</strong></p><p>Using this example, attaching an attribute to a relation looks like this in an ER diagram:</p><a href="/wp-content/uploads/2018/11/relation-attribute-er.png"><img loading="lazy" width="442" height="133" class="alignnone size-full wp-image-45370" src="https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er.png" alt="" srcset="https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er.png 442w, https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er-300x90.png 300w, https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-er-100x30.png 100w" sizes="(max-width: 442px) 100vw, 442px" /></a><p><strong>We can model it almost the same way as the simple many-to-many relationship. </strong><strong>The only difference is that we attach a new attribute to the join table:</strong></p><a href="/wp-content/uploads/2018/11/relation-attribute-model-updated.png"><img class="alignnone size-full wp-image-45371" src="https://www.baeldung.com/wp-content/uploads/2018/11/relation-attribute-model-updated.png" alt="" /></a><h3 data-id="2-creating-a-composite-key-in-jpa">3.2. Creating a Composite Key in JPA</h3><div class="bd-anchor" id="2-creating-a-composite-key-in-jpa"></div><p>The implementation of a simple many-to-many relationship was rather straightforward. The only problem is that we cannot add a property to a relationship that way because we connected the entities directly. Therefore, <strong>we had no way to add a property to the relationship itself.</strong></p><p>Since we map DB attributes to class fields in JPA,<strong> we need to create a new entity class for the relationship.</strong></p><p>Of course, every JPA entity needs a primary key. <strong>Because our primary key is a composite key, we have to create a new class that will hold the different parts of the key</strong>:</p><pre><code class="language-java">@Embeddableclass CourseRatingKey implements Serializable {    @Column(name = &quot;student_id&quot;)    Long studentId;    @Column(name = &quot;course_id&quot;)    Long courseId;    // standard constructors, getters, and setters    // hashcode and equals implementation}</code></pre><p>Note that a composite key class has to fulfill some <strong>key requirements</strong>:</p><ul><li>We have to mark it with <em>@Embeddable</em>.</li><li>It has to implement <em>java.io.Serializable</em>.</li><li>We need to provide an implementation of the <em>hashcode()</em> and <em>equals()</em> methods.</li><li>None of the fields can be an entity themselves.</li></ul><h3 data-id="3-using-a-composite-key-in-jpa">3.3. Using a Composite Key in JPA</h3><div class="bd-anchor" id="3-using-a-composite-key-in-jpa"></div><p>Using this composite key class, we can create the entity class, which models the join table:</p><div class=\'code-block code-block-6\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_2", slotId: "baeldung_incontent_2" });  </script></div></div><pre><code class="language-java">@Entityclass CourseRating {    @EmbeddedId    CourseRatingKey id;    @ManyToOne    @MapsId(&quot;studentId&quot;)    @JoinColumn(name = &quot;student_id&quot;)    Student student;    @ManyToOne    @MapsId(&quot;courseId&quot;)    @JoinColumn(name = &quot;course_id&quot;)    Course course;    int rating;    // standard constructors, getters, and setters}</code></pre><p>This code is very similar to a regular entity implementation. However, we have some key differences:</p><ul><li>We used <strong><em>@EmbeddedId</em> to mark the primary key</strong>, which is an instance of the <em>CourseRatingKey</em> class.</li><li><strong>We marked the <em>student</em> and <em>course</em> fields with <em>@MapsId</em>.</strong></li></ul><p><em>@MapsId</em> means that we tie those fields to a part of the key, and they\'re the foreign keys of a many-to-one relationship. We need it because, as we mentioned, we can\'t have entities in the composite key.</p><p>After this, we can configure the inverse references in the <em>Student</em> and <em>Course</em> entities as before:</p><pre><code class="language-java">class Student {    // ...    @OneToMany(mappedBy = &quot;student&quot;)    Set&lt;CourseRating&gt; ratings;    // ...}class Course {    // ...    @OneToMany(mappedBy = &quot;course&quot;)    Set&lt;CourseRating&gt; ratings;    // ...}</code></pre><p>Note that there\'s an alternative way to use composite keys: the <a href="/hibernate-identifiers"><em>@IdClass</em></a> annotation.</p><h3 data-id="4-further-characteristics">3.4. Further Characteristics</h3><div class="bd-anchor" id="4-further-characteristics"></div><p><strong>We configured the relationships to the <em>Student</em> and <em>Course</em> classes as <em>@ManyToOne</em>. We could do this because with the new entity we structurally decomposed the many-to-many relationship to two many-to-one relationships.</strong></p><p>Why were we able to do this? If we inspect the tables closely in the previous case, we can see that it contained two many-to-one relationships. <strong>In other words, there isn\'t any many-to-many relationship in an RDBMS. We call the structures we create with join tables many-to-many relationships because that\'s what we model.</strong></p><p>Besides, it\'s more clear if we talk about many-to-many relationships because that\'s our intention. Meanwhile, a join table is just an implementation detail; we don\'t really care about it.</p><p>Moreover, this solution has an additional feature we haven\'t mentioned yet. The simple many-to-many solution creates a relationship between two entities. Therefore, we cannot expand the relationship to more entities. But we don\'t have this limit in this solution: <strong>we can model relationships between any number of entity types.</strong></p><div class=\'code-block code-block-7\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_3", slotId: "baeldung_incontent_3" });  </script></div></div><p>For example, when multiple teachers can teach a course, students can rate how a specific teacher teaches a specific course. <strong>That way, a rating would be a relationship between three entities: a student, a course and a teacher.</strong></p><h2 data-id="many-to-many-with-a-new-entity">4. Many-to-Many With a New Entity</h2><div class="bd-anchor" id="many-to-many-with-a-new-entity"></div><h3 data-id="1-modeling-relationship-attributes-1">4.1. Modeling Relationship Attributes</h3><div class="bd-anchor" id="1-modeling-relationship-attributes-1"></div><p>Let\'s say we want to let students register for courses. Also, <strong>we need to store the point when a student registered for a specific course.</strong> On top of that, we want to store what grade she received in the course.</p><p>In an ideal world, we could solve this with the previous solution, where we had an entity with a composite key. However, the world is far from ideal, and students don\'t always accomplish a course on the first try.</p><p>In this case, there are <strong>multiple connections between the same student-course pairs</strong>, or multiple rows, with the same <em>student_id-course_id</em> pairs. We can\'t model it using any of the previous solutions because all primary keys must be unique. So, we need to use a separate primary key.</p><p>Therefore, <strong>we can introduce an entity</strong>, which will hold the attributes of the registration:</p><a href="/wp-content/uploads/2018/11/relation-entity-er-updated.png"><img class="alignnone size-full wp-image-45372" src="https://www.baeldung.com/wp-content/uploads/2018/11/relation-entity-er-updated.png" alt="" /></a><p>In this case, <strong>the Registration entity represents the relationship</strong> between the other two entities.</p><p>Since it\'s an entity, it\'ll have its own primary key.</p><p>In the previous solution, remember that we had a composite primary key we created from the two foreign keys.</p><div class=\'code-block code-block-8\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_4"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_4", slotId: "baeldung_incontent_4" });  </script></div></div><p>Now the two foreign keys won\'t be part of the primary key:</p><a href="/wp-content/uploads/2018/11/relation-entity-model-updated.png"><img class="alignnone size-full wp-image-45373" src="https://www.baeldung.com/wp-content/uploads/2018/11/relation-entity-model-updated.png" alt="" /></a><h3 data-id="2-implementation-in-jpa-1">4.2. Implementation in JPA</h3><div class="bd-anchor" id="2-implementation-in-jpa-1"></div><p>Since the <em>course_registration</em> became a regular table, we can create a plain old JPA entity modeling it:</p><pre><code class="language-java">@Entityclass CourseRegistration {    @Id    Long id;    @ManyToOne    @JoinColumn(name = &quot;student_id&quot;)    Student student;    @ManyToOne    @JoinColumn(name = &quot;course_id&quot;)    Course course;    LocalDateTime registeredAt;    int grade;    // additional properties    // standard constructors, getters, and setters}</code></pre><p>We also need to configure the relationships in the <em>Student</em> and <em>Course</em> classes:</p><pre><code class="language-java">class Student {    // ...    @OneToMany(mappedBy = &quot;student&quot;)    Set&lt;CourseRegistration&gt; registrations;    // ...}class Course {    // ...    @OneToMany(mappedBy = &quot;courses&quot;)    Set&lt;CourseRegistration&gt; registrations;    // ...}</code></pre><p>Again, we configured the relationship earlier, so we only need to tell JPA where can it find that configuration.</p><p>We could also use this solution to address the previous problem of students rating courses. However, it feels weird to create a dedicated primary key unless we have to.</p><p>Moreover, from an RDBMS perspective, it doesn\'t make much sense since combining the two foreign keys made a perfect composite key. Besides, that <strong>composite key had a clear meaning: which entities we connect in the relationship.</strong></p><p>Otherwise, the choice between these two implementations is often simply personal preference.</p><h2 data-id="conclusion">5. Conclusion</h2><div class="bd-anchor" id="conclusion"></div><p>In this article, we saw what a many-to-many relationship is and how can we model it in an RDBMS using JPA.</p><div class=\'code-block code-block-9\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_5"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_5", slotId: "baeldung_incontent_5" });  </script></div></div><p>We saw three ways to model it in JPA. All three have different advantages and disadvantages when it comes to these aspects:</p><ul><li>code clarity</li><li>DB clarity</li><li>ability to assign attributes to the relationship</li><li>how many entities we can link with the relationship</li><li>support for multiple connections between the same entities</li></ul><p>As usual, the examples are available <a href="https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-jpa-2" target="_blank" rel="noopener noreferrer">over on GitHub</a>.</p><div class=\'after-post-widgets\'><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="after-post-content-widget"><span style="display:none;">Persistence bottom</span> <div class="textwidget"><div class="short_box short_end"><strong>Get started with Spring Data JPA through the reference <em>Learn Spring Data JPA</em> course:</strong><strong><a href="/learn-spring-data-jpa-course#table">&gt;&gt; CHECK OUT THE COURSE</a></strong></div></div></div></div><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="widget_text after-post-banner-widget"><span style="display:none;">Persistence footer banner</span><div class="textwidget custom-html-widget"><div class="footer-html-banner footer-persistence-banner"><img class="" src="wp-content/uploads/2016/05/baeldung-persistence-post-footer-main-1.2.0.jpg" /><div class="header-row"><div class="image-col"><img class="" src="wp-content/uploads/2016/05/baeldung-persistence-post-footer-icn-1.0.0.png"></div><div class="text-col"><div class="smaller">An intro SPRING data, JPA<br /> and Transaction Semantics Details with JPA</div></div></div></div></div></div></section><div>Source: <a href="https://www.baeldung.com/jpa-many-to-many">https://www.baeldung.com/jpa-many-to-many</a></div></article>', 'In this tutorial, we\'ll see multiple ways to deal with many-to-many relationships using JPA.We\'ll use a model of students, courses, and va', 0),
(true, 'DECLINED', 1, 2, DATE_SUB(NOW(), INTERVAL 1 DAY), 'Spring Boot With H2 Database', '<article id="post-52220" class="clearfix post-52220 post type-post status-publish format-standard has-post-thumbnail hentry category-persistence category-spring-boot tag-copy-edit tag-popular" role="article" itemscope itemtype="http://schema.org/BlogPosting"><section class="post-content clearfix" itemprop="articleBody"><h2 data-id="overview"><strong>1. Overview </strong></h2><div class="bd-anchor" id="overview"></div><p>In this tutorial, we\'ll explore using H2 with Spring Boot. Just like other databases, there\'s full intrinsic support for it in the Spring Boot ecosystem.</p><section class="further-reading-posts"><div class="fr-header"><h2>Further reading:</h2></div><div class="fr-wrap"><div class="fr-item"><h2><a href="/java-in-memory-databases">List of In-Memory Databases</a></h2><div class="ex">A quick review of how to configure some of the more popular in-memory databases for a Java application.</div><div class="ex"><a href="/java-in-memory-databases">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/spring-boot-hibernate">Spring Boot with Hibernate</a></h2><div class="ex">A quick, practical intro to integrating Spring Boot and Hibernate/JPA.</div><div class="ex"><a href="/spring-boot-hibernate">Read more</a> &rarr;</div></div></div></section><h2 data-id="dependencies"><strong>2. Dependencies</strong></h2><div class="bd-anchor" id="dependencies"></div><p>Let\'s begin with the <em><a href="https://search.maven.org/search?q=g:com.h2database%20a:h2">h2</a></em> and <em><a href="https://search.maven.org/search?q=a:spring-boot-starter-data-jpa%20g:org.springframework.boot">spring-boot-starter-data-jpa</a> </em>dependencies:</p><pre><code class="language-xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.h2database&lt;/groupId&gt;    &lt;artifactId&gt;h2&lt;/artifactId&gt;    &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;</code></pre><h2 data-id="database-configuration"><strong>3. Database Configuration</strong></h2><div class="bd-anchor" id="database-configuration"></div><p>By default, Spring Boot configures the application to <strong>connect to an in-memory store with the username <em>sa</em> and an empty password</strong>.</p><p>However, we can change those parameters by adding the following properties to the <em>application.properties</em> file:</p><pre><code class="language-plaintext">spring.datasource.url=jdbc:h2:mem:testdbspring.datasource.driverClassName=org.h2.Driverspring.datasource.username=saspring.datasource.password=passwordspring.jpa.database-platform=org.hibernate.dialect.H2Dialect</code></pre><p>By design, the in-memory database is volatile, and data will be lost when we restart the application.</p><div class=\'code-block code-block-2\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __728x90" id="baeldung_leaderboard_mid_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_1", slotId: "baeldung_leaderboard_mid_1" });  </script></div></div><p>We can change that behavior by using file-based storage. To do this we need to update the <em>spring.datasource.url</em>:</p><pre><code class="language-plaintext">spring.datasource.url=jdbc:h2:file:/data/demo</code></pre><p>The database can also <a href="http://www.h2database.com/html/features.html#connection_modes">operate in other modes</a>.</p><h2 data-id="database-operations"><strong>4. Database Operations</strong></h2><div class="bd-anchor" id="database-operations"></div><p>Carrying out CRUD operations with H2 within Spring Boot is the same as with other SQL databases, and our tutorials in the <a href="/persistence-with-spring-series">Spring Persistence</a> series do a good job of covering this.</p><p>In the meantime, let\'s add a <em>data.sql </em>file in <em>src/main/resources</em>:</p><pre><code class="language-sql">DROP TABLE IF EXISTS billionaires;CREATE TABLE billionaires (  id INT AUTO_INCREMENT  PRIMARY KEY,  first_name VARCHAR(250) NOT NULL,  last_name VARCHAR(250) NOT NULL,  career VARCHAR(250) DEFAULT NULL);INSERT INTO billionaires (first_name, last_name, career) VALUES  (&#039;Aliko&#039;, &#039;Dangote&#039;, &#039;Billionaire Industrialist&#039;),  (&#039;Bill&#039;, &#039;Gates&#039;, &#039;Billionaire Tech Entrepreneur&#039;),  (&#039;Folrunsho&#039;, &#039;Alakija&#039;, &#039;Billionaire Oil Magnate&#039;);</code></pre><p>Spring Boot will automatically pick up the <em>data.sql </em>and run it against our configured H2 database during application startup. This is a good way to seed the database for testing or other purposes.</p><div class=\'code-block code-block-3\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_2", slotId: "baeldung_leaderboard_mid_2" });  </script></div></div><h2 data-id="h2-console"><strong>5. Accessing the H2 Console</strong></h2><div class="bd-anchor" id="h2-console"></div><p>H2 database has an embedded GUI console for browsing the contents of a database and running SQL queries. By default, the H2 console is not enabled in Spring.</p><p>To enable it, we need to add the following property to <em>application.properties</em>:</p><pre><code class="language-plaintext">spring.h2.console.enabled=true</code></pre><p>Then, after starting the application, we can navigate to <em>http://localhost:8080/h2-console</em>, which will present us with a login page.</p><p>On the login page, we\'ll supply the same credentials that we used in the <em>application.properties</em>:</p><a href="/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.21.34-PM-e1555173105246-1024x496.png"><img loading="lazy" width="1024" height="496" class="aligncenter size-full wp-image-52221" src="https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.21.34-PM-e1555173105246-1024x496.png" alt="" srcset="https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.21.34-PM-e1555173105246-1024x496.png 1024w, https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.21.34-PM-e1555173105246-1024x496-300x145.png 300w, https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.21.34-PM-e1555173105246-1024x496-768x372.png 768w, https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.21.34-PM-e1555173105246-1024x496-100x48.png 100w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p>Once we connect, we\'ll see a comprehensive webpage that lists all the tables on the left side of the page and a textbox for running SQL queries:</p><div class=\'code-block code-block-4\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_3", slotId: "baeldung_leaderboard_mid_3" });  </script></div></div><a href="/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.25.16-PM.png"><img loading="lazy" width="3294" height="1714" class="aligncenter size-full wp-image-52222" src="https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.25.16-PM.png" alt="" srcset="https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.25.16-PM.png 3294w, https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.25.16-PM-300x156.png 300w, https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.25.16-PM-768x400.png 768w, https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.25.16-PM-1024x533.png 1024w, https://www.baeldung.com/wp-content/uploads/2019/04/Screenshot-2019-04-13-at-5.25.16-PM-100x52.png 100w" sizes="(max-width: 3294px) 100vw, 3294px" /></a><p>The web console has an auto-complete feature that suggests SQL keywords. The fact that the console is lightweight makes it handy for visually inspecting the database or executing raw SQL directly.</p><p>Moreover, we can further configure the console by specifying the following properties in the project\'s <em>application.properties</em> with our desired values:</p><pre><code class="language-plaintext">spring.h2.console.path=/h2-consolespring.h2.console.settings.trace=falsespring.h2.console.settings.web-allow-others=false</code></pre><p>In the snippet above, we set the console path to be <em>/h2-console</em>, which is relative to the address and port of our running application. Therefore, if our app is running at <em>http://localhost:9001</em>, the console will be available at <em>http://localhost:9001/h2-console.</em></p><p>Furthermore, we set <em>spring.h2.console.settings.trace</em> to <em>false</em> to prevent trace output, and we can also disable remote access by setting <em>spring</em>.<em>h2.console.settings.web-allow-others</em> to <em>false</em>.</p><h2 data-id="conclusion"><strong>6. Conclusion</strong></h2><div class="bd-anchor" id="conclusion"></div><p>The H2 database is fully compatible with Spring Boot. We\'ve seen how to configure it and how to use the H2 console for managing our running database.</p><p>The complete source code is available over on <a href="https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-boot-persistence-h2">GitHub</a>.</p><div class=\'after-post-widgets\'><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="after-post-content-widget"><span style="display:none;">Persistence bottom</span> <div class="textwidget"><div class="short_box short_end"><strong>Get started with Spring Data JPA through the reference <em>Learn Spring Data JPA</em> course:</strong><strong><a href="/learn-spring-data-jpa-course#table">&gt;&gt; CHECK OUT THE COURSE</a></strong></div></div></div></div><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="widget_text after-post-banner-widget"><span style="display:none;">Persistence footer banner</span><div class="textwidget custom-html-widget"><div class="footer-html-banner footer-persistence-banner"><img class="" src="wp-content/uploads/2016/05/baeldung-persistence-post-footer-main-1.2.0.jpg" /><div class="header-row"><div class="image-col"><img class="" src="wp-content/uploads/2016/05/baeldung-persistence-post-footer-icn-1.0.0.png"></div><div class="text-col"><div class="smaller">An intro SPRING data, JPA<br /> and Transaction Semantics Details with JPA</div></div></div></div></div></div></section><div>Source: <a href="https://www.baeldung.com/spring-boot-h2-database">https://www.baeldung.com/spring-boot-h2-database</a></div></article>','In this tutorial, we\'ll explore using H2 with Spring Boot. Just like other databases, there\'s full intrinsic support for it in the Spring', 0),
(false, 'ACCEPTED', 1, 3, DATE_SUB(NOW(), INTERVAL 2 HOUR), 'Overview of JPA/Hibernate Cascade Types', '<article id="post-55262" class="clearfix post-55262 post type-post status-publish format-standard has-post-thumbnail hentry category-persistence tag-copy-edit tag-jpa" role="article" itemscope itemtype="http://schema.org/BlogPosting"><section class="post-content clearfix" itemprop="articleBody"><h2 style="text-align: left" data-id="overview">1. Overview </h2><div class="bd-anchor" id="overview"></div><p>In this tutorial, we\'ll discuss what cascading is in JPA/Hibernate. Then we\'ll cover the various cascade types that are available, along with their semantics.</p><section class="further-reading-posts"><div class="fr-header"><h2>Further reading:</h2></div><div class="fr-wrap"><div class="fr-item"><h2><a href="/the-persistence-layer-with-spring-data-jpa">Introduction to Spring Data JPA</a></h2><div class="ex">Introduction to Spring Data JPA with Spring 4 - the Spring config, the DAO, manual and generated queries and transaction management.</div><div class="ex"><a href="/the-persistence-layer-with-spring-data-jpa">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/jpa-entity-table-names">Mapping Entity Class Names to SQL Table Names with JPA</a></h2><div class="ex">Learn how table names are generated by default and how to override that behavior.</div><div class="ex"><a href="/jpa-entity-table-names">Read more</a> &rarr;</div></div></div></section><h2 data-id="what-is-cascading">2. What Is Cascading?</h2><div class="bd-anchor" id="what-is-cascading"></div><p>Entity relationships often depend on the existence of another entity, for example the <em>Person</em>&#8211;<em>Address</em> relationship. Without the <em>Person</em>, the <em>Address</em> entity doesn\'t have any meaning of its own. When we delete the <em>Person</em> entity, our <em>Address</em> entity should also get deleted.</p><p>Cascading is the way to achieve this. <strong>When we perform some action on the target entity, the same action will be applied to the associated entity.</strong></p><h3 data-id="1-jpa-cascade-type">2.1. JPA Cascade Type</h3><div class="bd-anchor" id="1-jpa-cascade-type"></div><p>All JPA-specific cascade operations are represented by the <em>javax.persistence.CascadeType </em>enum containing entries:</p><ul><li><em>ALL</em></li><li><em>PERSIST</em></li><li><em>MERGE</em></li><li><em>REMOVE</em></li><li><em>REFRESH</em></li><li><em>DETACH</em></li></ul><h3 data-id="2-hibernate-cascade-type">2.2. Hibernate Cascade Type</h3><div class="bd-anchor" id="2-hibernate-cascade-type"></div><p>Hibernate supports three additional Cascade Types along with those specified by JPA. These Hibernate-specific Cascade Types are available in <em>org.hibernate.annotations.CascadeType</em>:</p><div class=\'code-block code-block-2\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __728x90" id="baeldung_leaderboard_mid_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_1", slotId: "baeldung_leaderboard_mid_1" });  </script></div></div><ul><li><em>REPLICATE</em></li><li><em>SAVE_UPDATE</em></li><li><em>LOCK</em></li></ul><h2 data-id="difference-between-the-cascade-types">3. Difference Between the Cascade Types</h2><div class="bd-anchor" id="difference-between-the-cascade-types"></div><h3 data-id="1-cascadetypeall">3.1. <em>CascadeType</em>.<em>ALL</em></h3><div class="bd-anchor" id="1-cascadetypeall"></div><p><em>CascadeType.ALL</em> <strong>propagates all operations &#8212; including Hibernate-specific ones &#8212; from a parent to a child entity.</strong></p><p>Let\'s see it in an example:</p><pre><code class="language-java">@Entitypublic class Person {    @Id    @GeneratedValue(strategy = GenerationType.AUTO)    private int id;    private String name;    @OneToMany(mappedBy = &quot;person&quot;, cascade = CascadeType.ALL)    private List&lt;Address&gt; addresses;}</code></pre><p><strong>Note that in <em>OneToMany</em> associations, we\'ve mentioned cascade type in the annotation.</strong></p><p>Now let\'s see the associated entity <em>Address</em>:</p><pre><code class="language-java">@Entitypublic class Address {    @Id    @GeneratedValue(strategy = GenerationType.AUTO)    private int id;    private String street;    private int houseNumber;    private String city;    private int zipCode;    @ManyToOne(fetch = FetchType.LAZY)    private Person person;}</code></pre><h3 data-id="2-cascadetypepersist">3.2. <em>CascadeType</em>.<em>PERSIST</em></h3><div class="bd-anchor" id="2-cascadetypepersist"></div><p>The persist operation makes a transient instance persistent. <strong>Cascade Type <em>PERSIST</em> propagates the persist operation from a parent to a child entity.</strong> When we save the <em>person</em> entity, the <em>address</em> entity will also get saved.</p><div class=\'code-block code-block-3\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_2", slotId: "baeldung_leaderboard_mid_2" });  </script></div></div><p>Let\'s see the test case for a persist operation:</p><pre><code class="language-java">@Testpublic void whenParentSavedThenChildSaved() {    Person person = new Person();    Address address = new Address();    address.setPerson(person);    person.setAddresses(Arrays.asList(address));    session.persist(person);    session.flush();    session.clear();}</code></pre><p>When we run the above test case, we\'ll see the following SQL:</p><pre><code class="language-java">Hibernate: insert into Person (name, id) values (?, ?)Hibernate: insert into Address (    city, houseNumber, person_id, street, zipCode, id) values (?, ?, ?, ?, ?, ?)</code></pre><h3 data-id="3-cascadetypemerge">3.3. <em>CascadeType</em>.<em>MERGE</em></h3><div class="bd-anchor" id="3-cascadetypemerge"></div><p>The merge operation copies the state of the given object onto the persistent object with the same identifier. <strong><em>CascadeType.MERGE</em> propagates the merge operation from a parent to a child entity.</strong></p><p>Let\'s test the merge operation:</p><pre><code class="language-java">@Testpublic void whenParentSavedThenMerged() {    int addressId;    Person person = buildPerson(&quot;devender&quot;);    Address address = buildAddress(person);    person.setAddresses(Arrays.asList(address));    session.persist(person);    session.flush();    addressId = address.getId();    session.clear();    Address savedAddressEntity = session.find(Address.class, addressId);    Person savedPersonEntity = savedAddressEntity.getPerson();    savedPersonEntity.setName(&quot;devender kumar&quot;);    savedAddressEntity.setHouseNumber(24);    session.merge(savedPersonEntity);    session.flush();}</code></pre><p>When we run the test case, the merge operation generates the following SQL:</p><div class=\'code-block code-block-4\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_3", slotId: "baeldung_leaderboard_mid_3" });  </script></div></div><pre><code class="language-sql">Hibernate: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.houseNumber as houseNum3_0_0_, address0_.person_id as person_i6_0_0_, address0_.street as street4_0_0_, address0_.zipCode as zipCode5_0_0_ from Address address0_ where address0_.id=?Hibernate: select person0_.id as id1_1_0_, person0_.name as name2_1_0_ from Person person0_ where person0_.id=?Hibernate: update Address set city=?, houseNumber=?, person_id=?, street=?, zipCode=? where id=?Hibernate: update Person set name=? where id=?</code></pre><p>Here, we can see that the merge operation first loads both <em>address</em> and <em>person</em> entities and then updates both as a result of <em>CascadeType.MERGE</em>.</p><h3 data-id="4-cascadetyperemove">3.4. <em>CascadeType.REMOVE</em></h3><div class="bd-anchor" id="4-cascadetyperemove"></div><p>As the name suggests, the remove operation removes the row corresponding to the entity from the database and also from the persistent context.</p><p><strong><em>CascadeType.REMOVE</em> propagates the remove operation from parent to child entity.</strong> <strong>Similar to JPA\'s <em>CascadeType.REMOVE</em>, we have <em>CascadeType.DELETE</em>, which is specific to Hibernate.</strong> There is no difference between the two.</p><p>Now it\'s time to test <em>CascadeType.Remove</em>:</p><pre><code class="language-java">@Testpublic void whenParentRemovedThenChildRemoved() {    int personId;    Person person = buildPerson(&quot;devender&quot;);    Address address = buildAddress(person);    person.setAddresses(Arrays.asList(address));    session.persist(person);    session.flush();    personId = person.getId();    session.clear();    Person savedPersonEntity = session.find(Person.class, personId);    session.remove(savedPersonEntity);    session.flush();}</code></pre><p>When we run the test case, we\'ll see the following SQL:</p><pre><code class="language-sql">Hibernate: delete from Address where id=?Hibernate: delete from Person where id=?</code></pre><p>The <em>address</em> associated with the <em>person</em> also got removed as a result of<em> CascadeType.REMOVE</em>.</p><h3 data-id="5-cascadetypedetach">3.5. <em>CascadeType.DETACH</em></h3><div class="bd-anchor" id="5-cascadetypedetach"></div><p>The detach operation removes the entity from the persistent context. <strong>When we use <em>CascadeType.DETACH</em>, the child entity will also get removed from the persistent context.</strong></p><p>Let\'s see it in action:</p><div class=\'code-block code-block-5\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_1", slotId: "baeldung_incontent_1" });  </script></div></div><pre><code class="language-java">@Testpublic void whenParentDetachedThenChildDetached() {    Person person = buildPerson(&quot;devender&quot;);    Address address = buildAddress(person);    person.setAddresses(Arrays.asList(address));    session.persist(person);    session.flush();    assertThat(session.contains(person)).isTrue();    assertThat(session.contains(address)).isTrue();    session.detach(person);    assertThat(session.contains(person)).isFalse();    assertThat(session.contains(address)).isFalse();}</code></pre><p>Here, we can see that after detaching <em>person</em>, neither <em>person</em> nor <em>address</em> exists in the persistent context.</p><h3 data-id="6-cascadetypelock">3.6. <em>CascadeType</em>.<em>LOCK</em></h3><div class="bd-anchor" id="6-cascadetypelock"></div><p><strong>Unintuitively,<em> CascadeType.LOCK</em> reattaches the entity and its associated child entity with the persistent context again.</strong></p><p>Let\'s see the test case to understand <em>CascadeType.LOCK</em>:</p><pre><code class="language-java">@Testpublic void whenDetachedAndLockedThenBothReattached() {    Person person = buildPerson(&quot;devender&quot;);    Address address = buildAddress(person);    person.setAddresses(Arrays.asList(address));    session.persist(person);    session.flush();    assertThat(session.contains(person)).isTrue();    assertThat(session.contains(address)).isTrue();    session.detach(person);    assertThat(session.contains(person)).isFalse();    assertThat(session.contains(address)).isFalse();    session.unwrap(Session.class)      .buildLockRequest(new LockOptions(LockMode.NONE))      .lock(person);    assertThat(session.contains(person)).isTrue();    assertThat(session.contains(address)).isTrue();}</code></pre><p>As we can see, when using <em>CascadeType.LOCK</em>, we attached the entity <em>person</em> and its associated <em>address</em> back to the persistent context.</p><h3 data-id="7-cascadetyperefresh">3.7. <em>CascadeType</em>.<em>REFRESH</em></h3><div class="bd-anchor" id="7-cascadetyperefresh"></div><p>Refresh operations <strong>reread the value of a given instance from the database.</strong> In some cases, we may change an instance after persisting in the database, but later we need to undo those changes.</p><p>In that kind of scenario, this may be useful. <strong>When we use this operation with Cascade Type <em>REFRESH</em>, the child entity also gets reloaded from the database whenever the parent entity is refreshed.</strong></p><p>For better understanding, let\'s see a test case for <em>CascadeType.REFRESH</em>:</p><pre><code class="language-java">@Testpublic void whenParentRefreshedThenChildRefreshed() {    Person person = buildPerson(&quot;devender&quot;);    Address address = buildAddress(person);    person.setAddresses(Arrays.asList(address));    session.persist(person);    session.flush();    person.setName(&quot;Devender Kumar&quot;);    address.setHouseNumber(24);    session.refresh(person);    assertThat(person.getName()).isEqualTo(&quot;devender&quot;);    assertThat(address.getHouseNumber()).isEqualTo(23);}</code></pre><p>Here, we made some changes in the saved entities <em>person</em> and <em>address</em>. When we refresh the <em>person</em> entity, the <em>address</em> also gets refreshed.</p><div class=\'code-block code-block-6\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_2", slotId: "baeldung_incontent_2" });  </script></div></div><h3 data-id="8-cascadetypereplicate">3.8. <em>CascadeType.REPLICATE</em></h3><div class="bd-anchor" id="8-cascadetypereplicate"></div><p><strong>The replicate operation is used when we have more than one data source and we want the data in sync.</strong> With <em>CascadeType.REPLICATE</em>, a sync operation also propagates to child entities whenever performed on the parent entity.</p><p>Now let\'s test <em>CascadeType.</em><em>REPLICATE</em>:</p><pre><code class="language-java">@Testpublic void whenParentReplicatedThenChildReplicated() {    Person person = buildPerson(&quot;devender&quot;);    person.setId(2);    Address address = buildAddress(person);    address.setId(2);    person.setAddresses(Arrays.asList(address));    session.unwrap(Session.class).replicate(person, ReplicationMode.OVERWRITE);    session.flush();    assertThat(person.getId()).isEqualTo(2);    assertThat(address.getId()).isEqualTo(2);}</code></pre><p>Because of <em>CascadeType</em>.<em>REPLICATE</em>, when we replicate the <em>person</em> entity, its associated <em>address</em> also gets replicated with the identifier we set.</p><h3 data-id="9-cascadetypesaveupdate">3.9. <em>CascadeType.SAVE_UPDATE</em></h3><div class="bd-anchor" id="9-cascadetypesaveupdate"></div><p><em>CascadeType.SAVE_UPDATE</em> propagates the same operation to the associated child entity. It\'s useful when we use <strong>Hibernate-specific operations like <em>save</em>,<em> update</em> and <em>saveOrUpdate</em>. </strong></p><p>Let\'s see <em>CascadeType.</em><em>SAVE_UPDATE</em> in action:</p><pre><code class="language-java">@Testpublic void whenParentSavedThenChildSaved() {    Person person = buildPerson(&quot;devender&quot;);    Address address = buildAddress(person);    person.setAddresses(Arrays.asList(address));    session.saveOrUpdate(person);    session.flush();}</code></pre><p>Because of <em>CascadeType.SAVE_UPDATE</em>, when we run the above test case, we can see that the <em>person</em> and <em>address</em> both got saved.</p><p>Here\'s the resulting SQL:</p><pre><code class="language-sql">Hibernate: insert into Person (name, id) values (?, ?)Hibernate: insert into Address (    city, houseNumber, person_id, street, zipCode, id) values (?, ?, ?, ?, ?, ?)</code></pre><h2 data-id="conclusion">4. Conclusion</h2><div class="bd-anchor" id="conclusion"></div><p>In this article, we discussed cascading and the different cascade type options available in JPA and Hibernate.</p><div class=\'code-block code-block-7\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_3", slotId: "baeldung_incontent_3" });  </script></div></div><p>The source code for the article is <a href="https://github.com/eugenp/tutorials/tree/master/persistence-modules/jpa-hibernate-cascade-type">available on GitHub</a>.</p><div class=\'after-post-widgets\'><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="after-post-content-widget"><span style="display:none;">Persistence bottom</span> <div class="textwidget"><div class="short_box short_end"><strong>Get started with Spring Data JPA through the reference <em>Learn Spring Data JPA</em> course:</strong><strong><a href="/learn-spring-data-jpa-course#table">&gt;&gt; CHECK OUT THE COURSE</a></strong></div></div></div></div><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="widget_text after-post-banner-widget"><span style="display:none;">Persistence footer banner</span><div class="textwidget custom-html-widget"><div class="footer-html-banner footer-persistence-banner"><img class="" src="wp-content/uploads/2016/05/baeldung-persistence-post-footer-main-1.2.0.jpg" /><div class="header-row"><div class="image-col"><img class="" src="wp-content/uploads/2016/05/baeldung-persistence-post-footer-icn-1.0.0.png"></div><div class="text-col"><div class="smaller">An intro SPRING data, JPA<br /> and Transaction Semantics Details with JPA</div></div></div></div></div></section><div>Source: <a href="https://www.baeldung.com/jpa-cascade-types">https://www.baeldung.com/jpa-cascade-types</a></div></article>', 'In this tutorial, we\'ll discuss what cascading is in JPA/Hibernate. Then we\'ll cover the various cascade types that are available, along w', 0),
(true, 'ACCEPTED', 1, 3, DATE_SUB(NOW(), INTERVAL 1 HOUR), 'Introduction to Spring Data JPA', '<article id="post-838" class="clearfix post-838 post type-post status-publish format-standard has-post-thumbnail hentry category-spring-data tag-copy-edit tag-jpa tag-popular" role="article" itemscope itemtype="http://schema.org/BlogPosting"><section class="post-content clearfix" itemprop="articleBody"><div class="wwsgd_new_visitor" style="display:none;"></div><div class="wwsgd_return_visitor" style="display:none;"></div><h2 data-id="overview"><strong>1. Overview </strong></h2><div class="bd-anchor" id="overview"></div><p>This tutorial will focus on <strong>introducing Spring Data JPA into a Spring project,</strong> and fully configuring the persistence layer. For a step by step introduction to setting up the Spring context using Java-based configuration and the basic Maven pom for the project, see <a title="Bootstrapping a web application with Spring 3.1 and Java based Configuration, part 1" href="/bootstraping-a-web-application-with-spring-and-java-based-configuration" rel="noopener">this article</a>.</p><p><section class="further-reading-posts"><div class="fr-header"><h2>Further reading:</h2></div><div class="fr-wrap"><div class="fr-item"><h2><a href="/the-persistence-layer-with-spring-and-jpa">A Guide to JPA with Spring</a></h2><div class="ex">Setup JPA with Spring - how to set up the EntityManager factory and use the raw JPA APIs.</div><div class="ex"><a href="/the-persistence-layer-with-spring-and-jpa">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/spring-data-repositories">CrudRepository, JpaRepository, and PagingAndSortingRepository in Spring Data</a></h2><div class="ex">Learn about the different flavours of repositories offered by Spring Data.</div><div class="ex"><a href="/spring-data-repositories">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/simplifying-the-data-access-layer-with-spring-and-java-generics">Simplify the DAO with Spring and Java Generics</a></h2><div class="ex">Simplify the Data Access Layer by using a single, generified DAO, which will result in <strong>elegant data access</strong>, no unnecessary clutter.</div><div class="ex"><a href="/simplifying-the-data-access-layer-with-spring-and-java-generics">Read more</a> &rarr;</div></div></div></section><span id="more-838"></span></p><h2 data-id="springdatadao"><strong>2. The Spring Data Generated DAO &#8211; No More DAO Implementations</strong></h2><div class="bd-anchor" id="springdatadao"></div><p>As we discussed in an earlier article, <a title="Removing the boilerplate from the DAO" href="/simplifying-the-data-access-layer-with-spring-and-java-generics">the DAO layer</a> usually consists of a lot of boilerplate code that can and should be simplified. The advantages of such a simplification are many: a decrease in the number of artifacts that we need to define and maintain, consistency of data access patterns, and consistency of configuration.</p><p>Spring Data takes this simplification one step further and <strong>makes it possible to remove the DAO implementations entirely</strong>. The interface of the DAO is now the only artifact that we need to explicitly define.</p><p>In order to start leveraging the Spring Data programming model with JPA, a DAO interface needs to extend the JPA specific <em>Repository</em> interface, <em>JpaRepository</em>. This will enable Spring Data to find this interface and automatically create an implementation for it.</p><div class=\'code-block code-block-2\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __728x90" id="baeldung_leaderboard_mid_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_1", slotId: "baeldung_leaderboard_mid_1" });  </script></div></div><p>By extending the interface, we get the most relevant CRUD methods for standard data access available in a standard DAO.</p><h2 data-id="customquery"><strong>3. Custom Access Method and Queries</strong></h2><div class="bd-anchor" id="customquery"></div><p>As discussed, <strong>by implementing one of the <em>Repository</em> interfaces, the DAO will already have some basic CRUD methods (and queries) defined and implemented</strong>.</p><p>To define more specific access methods, Spring JPA supports quite a few options:</p><ul><li>simply<strong> define a new method</strong> in the interface</li><li>provide the actual <strong>JPQL query</strong> by using the <em>@Query</em> annotation</li><li>use the more advanced <strong>Specification and Querydsl support</strong> in Spring Data</li><li>define <strong>custom queries</strong> via JPA Named Queries</li></ul><p>The <a href="https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/">third option</a>, Specifications and Querydsl support, is similar to JPA Criteria, but uses a more flexible and convenient API. This makes the whole operation much more readable and reusable. The advantages of this API will become more pronounced when dealing with a large number of fixed queries, as we could potentially express these more concisely through a smaller number of reusable blocks.</p><p>The last option has the disadvantage that it either involves XML or burdening the domain class with the queries.</p><div class=\'code-block code-block-3\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_2", slotId: "baeldung_leaderboard_mid_2" });  </script></div></div><h3 data-id="1-automatic-custom-queries"><strong>3.1. Automatic Custom Queries</strong></h3><div class="bd-anchor" id="1-automatic-custom-queries"></div><p>When Spring Data creates a new <em>Repository</em> implementation, it analyses all the methods defined by the interfaces and tries to <strong>automatically generate queries from the method names</strong>. While this has some limitations, it\'s a very powerful and elegant way of defining new custom access methods with very little effort.</p><p>Let\'s look at an example. If the entity has a <em>name </em>field (and the Java Bean standard <em>getName</em> and <em>setName</em> methods), <strong>we\'ll define the <em>findByName</em> method in the DAO interface.</strong> This will automatically generate the correct query:</p><pre><code class="language-java">public interface IFooDAO extends JpaRepository&lt;Foo, Long&gt; {    Foo findByName(String name);}</code></pre><p>This is a relatively simple example. The query creation mechanism supports <a title="Spring Data JPA - Query creation" href="https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/#jpa.query-methods.query-creation" rel="nofollow">a much larger set of keywords</a>.</p><p>In case the parser can\'t match the property with the domain object field, we\'ll see the following exception:</p><pre><code class="language-bash">java.lang.IllegalArgumentException: No property nam found for type class com.baeldung.spring.data.persistence.model.Foo</code></pre><h3 data-id="2-manual-custom-queries"><strong>3.2. Manual Custom Queries</strong></h3><div class="bd-anchor" id="2-manual-custom-queries"></div><p>Now let\'s look at a custom query that we\'ll define via the <em>@Query</em> annotation:</p><div class=\'code-block code-block-4\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_3", slotId: "baeldung_leaderboard_mid_3" });  </script></div></div><pre><code class="language-java">@Query(&quot;SELECT f FROM Foo f WHERE LOWER(f.name) = LOWER(:name)&quot;)Foo retrieveByName(@Param(&quot;name&quot;) String name);</code></pre><p>For even more fine-grained control over the creation of queries, such as using named parameters or modifying existing queries, <a title="Spring Data JPA - Query creation additional options" href="https://docs.spring.io/spring-data/data-jpa/docs/current/reference/html/#jpa.named-parameters" rel="nofollow">the reference</a> is a good place to start.</p><h2 data-id="transactions"><strong>4. Transaction Configuration </strong></h2><div class="bd-anchor" id="transactions"></div><p>The actual implementation of the Spring-managed DAO is indeed hidden since we don\'t work with it directly. However, it\'s a simple enough implementation, <strong>the <em>SimpleJpaRepository,</em> which defines transaction semantics using annotations</strong>.</p><p>More explicitly, this uses a read-only <em>@Transactional</em> annotation at the class level, which is then overridden for the non-read-only methods. The rest of the transaction semantics are default, but these can be easily overridden manually per method.</p><h3 data-id="1-exception-translation-is-alive-and-well"><strong>4.1. Exception Translation Is Alive and Well </strong></h3><div class="bd-anchor" id="1-exception-translation-is-alive-and-well"></div><p>The question now becomes: since Spring Data JPA doesn\'t depend on the old ORM templates (<em>JpaTemplate</em>, <em>HibernateTemplate</em>), and they have been removed since Spring 5, are we still going to get our JPA exceptions translated to Spring\'s <em>DataAccessException</em> hierarchy?</p><p>The answer is, of course we are. <strong>Exception translation is still enabled by the use of the <em>@Repository</em> annotation on the DAO</strong>. This annotation enables a Spring bean postprocessor to advise all <em>@Repository</em> beans with all the <em>PersistenceExceptionTranslator</em> instances found in the container, and provide exception translation just as before.</p><p>Let\'s verify exception translation with an integration test:</p><pre><code class="language-java">@Test(expected = DataIntegrityViolationException.class)public void givenFooHasNoName_whenInvalidEntityIsCreated_thenDataException() {    service.create(new Foo());}</code></pre><p>Keep in mind that <strong>exception translation is done through proxies.</strong> In order for Spring to be able to create proxies around the DAO classes, these must not be declared <em>final</em>.</p><h2 data-id="config"><strong>5. Spring Data JPA Repository Configuration</strong></h2><div class="bd-anchor" id="config"></div><p>To activate the Spring JPA repository support, we can use the <em>@EnableJpaRepositories</em> annotation and specify the package that contains the DAO interfaces:</p><div class=\'code-block code-block-5\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_1", slotId: "baeldung_incontent_1" });  </script></div></div><pre><code class="language-java">@EnableJpaRepositories(basePackages = &quot;com.baeldung.spring.data.persistence.repository&quot;)public class PersistenceConfig {    ...}</code></pre><p>We can do the same with an XML configuration:</p><pre><code class="language-xml">&lt;jpa:repositories base-package=&quot;com.baeldung.spring.data.persistence.repository&quot; /&gt;</code></pre><h2 data-id="javaxml"><strong>6. Java or XML Configuration</strong></h2><div class="bd-anchor" id="javaxml"></div><p>We already discussed in great detail how to <a href="/the-persistence-layer-with-spring-and-jpa" rel="noopener">configure JPA in Spring</a> in a previous article. Spring Data also takes advantage of Spring\'s support for the JPA <em>@PersistenceContext</em> annotation. It uses this to wire the <em>EntityManager</em> into the Spring factory bean responsible for creating the actual DAO implementations, <em>JpaRepositoryFactoryBean</em>.</p><p>In addition to the already discussed configuration, we also need to include the Spring Data XML Config if we are using XML:</p><pre><code class="language-java">@Configuration@EnableTransactionManagement@ImportResource(&quot;classpath*:*springDataConfig.xml&quot;)public class PersistenceJPAConfig {    ...}</code></pre><h2 data-id="maven"><strong>7. Maven Dependency</strong></h2><div class="bd-anchor" id="maven"></div><p>In addition to the Maven configuration for JPA, like in a <a href="/the-persistence-layer-with-spring-and-jpa" rel="noopener">previous article</a>, we\'ll add <a href="https://search.maven.org/search?q=g:org.springframework.data%20a:spring-data-jpa">the <em>spring-data-jpa</em> dependency</a>:</p><pre><code class="language-xml">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;   &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;   &lt;version&gt;2.4.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 data-id="using-spring-boot">8. Using Spring Boot</h2><div class="bd-anchor" id="using-spring-boot"></div><p><strong>We can also use the <a href="https://search.maven.org/search?q=a:spring-boot-starter-data-jpa">Spring Boot Starter Data JPA</a> dependency that will automatically configure the <em>DataSource</em> for us.</strong></p><p>We need to make sure that the database we want to use is present in the classpath. In our example, we\'ve added the H2 in-memory database:</p><pre><code class="language-xml">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;   &lt;version&gt;2.4.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;com.h2database&lt;/groupId&gt;    &lt;artifactId&gt;h2&lt;/artifactId&gt;    &lt;version&gt;1.4.200&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>As a result, just by doing these dependencies, our application is up and running and we can use it for other database operations.</p><p><strong>The explicit configuration for a standard Spring application is now included as part of Spring Boot auto-configuration.</strong></p><div class=\'code-block code-block-6\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_2", slotId: "baeldung_incontent_2" });  </script></div></div><p>We can, of course, modify the auto-configuration by adding our customized explicit configuration.</p><p>Spring Boot provides an easy way to do this using properties in the <em>application.properties</em> file:</p><pre><code class="language-java">spring.datasource.url=jdbc:h2:mem:db;DB_CLOSE_DELAY=-1spring.datasource.username=saspring.datasource.password=sa</code></pre><p>In this example, we\'ve changed the connection URL and credentials.</p><h2 data-id="conclusion"><strong>9. Conclusion</strong></h2><div class="bd-anchor" id="conclusion"></div><p>In this article, we covered the configuration and implementation of the persistence layer with Spring 5, JPA 2, and Spring Data JPA (part of the Spring Data umbrella project) using both XML and Java-based configuration.</p><p>We discussed ways to define more <strong>advanced custom queries</strong>, as well as <strong>transactional semantics</strong>, and a <strong>configuration with the new <em>jpa</em> namespace</strong>. The final result is a new and elegant take on data access with Spring, with almost no actual implementation work.</p><p>The implementation of this Spring Data JPA tutorial can be found in <a title="Spring Data JPA example project" href="https://github.com/eugenp/tutorials/tree/master/persistence-modules/spring-data-jpa-repo-2" target="_blank" rel="nofollow noopener noreferrer">the GitHub project</a>.</p><span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;"></span><div class=\'after-post-widgets\'><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="after-post-content-widget"><span style="display:none;">Persistence bottom</span> <div class="textwidget"><div class="short_box short_end"><strong>Get started with Spring Data JPA through the reference <em>Learn Spring Data JPA</em> course:</strong><strong><a href="/learn-spring-data-jpa-course#table">&gt;&gt; CHECK OUT THE COURSE</a></strong></div></div></div></div><span style="display:none" class="tl-placeholder-f-type-post_footer"></span></section><div>Source: <a href="https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa">https://www.baeldung.com/the-persistence-layer-with-spring-data-jpa</a></div></article>', 'This tutorial will focus on introducing Spring Data JPA into a Spring project, and fully configuring the persistence layer. For a step by', 0),
(true, 'ACCEPTED', 1, 3, NOW(), 'Logging in Spring Boot', '<article id="post-36067" class="clearfix post-36067 post type-post status-publish format-standard has-post-thumbnail hentry category-logging category-spring-boot tag-boot-basics tag-copy-edit tag-popular" role="article" itemscope itemtype="http://schema.org/BlogPosting"><section class="post-content clearfix" itemprop="articleBody"><div class="wwsgd_new_visitor" style="display:none;"></div><div class="wwsgd_return_visitor" style="display:none;"></div><h2 data-id="overview"><strong>1. Overview </strong></h2><div class="bd-anchor" id="overview"></div><p>In this short tutorial, we\'re going to explore the main logging options available in Spring Boot.</p><p>Deeper information about Logback is available in <a href="/logback">A Guide to Logback</a>, while Log4j2 is introduced in <a href="/log4j2-appenders-layouts-filters">Intro to Log4j2 – Appenders, Layouts and Filters</a>.</p><section class="further-reading-posts"><div class="fr-header"><h2>Further reading:</h2></div><div class="fr-wrap"><div class="fr-item"><h2><a href="/spring-boot-testing-log-level">Setting the Log Level in Spring Boot when Testing</a></h2><div class="ex">For when you need to diagnose test failures by examining more detailed log output, here is how to reconfigure the logging in Spring apps at test time.</div><div class="ex"><a href="/spring-boot-testing-log-level">Read more</a> &rarr;</div></div><div class="fr-item"><h2><a href="/spring-boot-auto-configuration-report">Display Auto-Configuration Report in Spring Boot</a></h2><div class="ex">Learn which beans are automatically configured in your Spring Boot application by generating an auto-configuration report during startup.</div><div class="ex"><a href="/spring-boot-auto-configuration-report">Read more</a> &rarr;</div></div></div></section><h2 data-id="the-test-case"><strong>2. Initial Setup</strong></h2><div class="bd-anchor" id="the-test-case"></div><p>Let\'s first create a Spring Boot module. The recommended way to do so is using <a href="https://start.spring.io/">Spring Initializr</a>, which we cover in our <a href="/spring-boot-start">Spring Boot Tutorial</a>.</p><p>Now let\'s create our only class file, <em>LoggingController</em>:</p><pre><code class="language-java">@RestControllerpublic class LoggingController {    Logger logger = LoggerFactory.getLogger(LoggingController.class);    @RequestMapping(&quot;/&quot;)    public String index() {        logger.trace(&quot;A TRACE Message&quot;);        logger.debug(&quot;A DEBUG Message&quot;);        logger.info(&quot;An INFO Message&quot;);        logger.warn(&quot;A WARN Message&quot;);        logger.error(&quot;An ERROR Message&quot;);        return &quot;Howdy! Check out the Logs to see the output...&quot;;    }}</code></pre><p>Once we\'ve loaded the web application, <strong>we\'ll be able to trigger those logging lines by simply visiting <em>http://localhost:8080/</em>.</strong></p><div class=\'code-block code-block-2\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __728x90" id="baeldung_leaderboard_mid_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_1", slotId: "baeldung_leaderboard_mid_1" });  </script></div></div><h2 data-id="zero-configuration-logging"><strong>3. Zero Configuration Logging</strong></h2><div class="bd-anchor" id="zero-configuration-logging"></div><p>Spring Boot is a very helpful framework. It allows us to forget about the majority of the configuration settings, many of which it opinionatedly auto-tunes.</p><p>In the case of logging, the only mandatory dependency is <em>Apache Commons Logging.</em></p><p>We need to import it only when using Spring 4.x (<a href="https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot-dependencies/pom.xml#L154">Spring Boot 1.x</a>) since it\'s provided by Spring Framework’s <em><strong>spring-jcl</strong></em> module in Spring 5 (<a href="https://github.com/spring-projects/spring-boot/blob/2.0.x/spring-boot-project/spring-boot-dependencies/pom.xml#L154">Spring Boot 2.x</a>).</p><p><strong>We shouldn\'t worry about importing <em>spring-jcl</em> at all if we\'re using a Spring Boot Starter</strong> (which we almost always are). That\'s because every starter, like our <em>spring-boot-starter-web</em>, depends on <em>spring-boot-starter-logging,</em> which already pulls in <em>spring-jcl</em> for us.</p><h3 data-id="1-default-logback-logging">3.1. Default Logback Logging</h3><div class="bd-anchor" id="1-default-logback-logging"></div><p><strong>When using starters, Logback is used for logging by default.</strong></p><div class=\'code-block code-block-3\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_2", slotId: "baeldung_leaderboard_mid_2" });  </script></div></div><p>Spring Boot preconfigures it with patterns and ANSI colors to make the standard output more readable.</p><p>Let\'s now run the application and visit the <em>http://localhost:8080/</em> page, and see what happens in the console:</p><a href="/wp-content/uploads/2018/07/logback-default-logging.png"><img loading="lazy" width="1024" height="562" class="aligncenter size-large wp-image-36069" src="/wp-content/uploads/2018/07/logback-default-logging-1024x562.png" alt="" srcset="https://www.baeldung.com/wp-content/uploads/2018/07/logback-default-logging-1024x562.png 1024w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-default-logging-300x165.png 300w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-default-logging-768x421.png 768w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-default-logging-100x55.png 100w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-default-logging.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p>As we can see, <strong>the default logging level of the Logger is preset to INFO, meaning that </strong><strong><em>TRACE</em> and <em>DEBUG</em> messages are not visible.</strong></p><p>In order to activate them without changing the configuration, <strong>we can pass the <em>&#8211;debug</em> or <em>&#8211;trace</em> arguments on the command line</strong>:</p><pre><code class="language-bash">java -jar target/spring-boot-logging-0.0.1-SNAPSHOT.jar --trace</code></pre><h3 data-id="2-log-levels">3.2. Log Levels</h3><div class="bd-anchor" id="2-log-levels"></div><p>Spring Boot also <strong>gives us access to a more fine-grained log level setting via environment variables.</strong> There are several ways we can accomplish this.</p><div class=\'code-block code-block-4\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__300x250 __336x280" id="baeldung_leaderboard_mid_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_leaderboard_mid_3", slotId: "baeldung_leaderboard_mid_3" });  </script></div></div><p>First, we can set our logging level within our VM Options:</p><pre><code class="language-plaintext">-Dlogging.level.org.springframework=TRACE-Dlogging.level.com.baeldung=TRACE</code></pre><p>Alternatively, if we\'re using Maven, we can <strong>define our log settings via the command line</strong>:</p><pre><code class="language-bash">mvn spring-boot:run  -Dspring-boot.run.arguments=--logging.level.org.springframework=TRACE,--logging.level.com.baeldung=TRACE</code></pre><p>When working with Gradle, we can pass log settings through the command line. This will require <a href="/spring-boot-command-line-arguments#gradle">setting the <em>bootRun</em> task</a>.</p><p>Once that\'s done, we run the application:</p><pre><code class="language-bash">./gradlew bootRun -Pargs=--logging.level.org.springframework=TRACE,--logging.level.com.baeldung=TRACE</code></pre><p>If we want to change the verbosity permanently, we can do so in the <em>application.properties</em> file as described <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-custom-log-levels">here</a>:</p><pre><code class="language-plaintext">logging.level.root=WARNlogging.level.com.baeldung=TRACE</code></pre><p>Finally, we can <strong>change the logging level permanently by using our logging framework configuration file.</strong></p><p>We mentioned that Spring Boot Starter uses Logback by default. Let\'s see how to define a fragment of a Logback configuration file in which we set the level for two separate packages:</p><pre><code class="language-xml">&lt;logger name=&quot;org.springframework&quot; level=&quot;INFO&quot; /&gt;&lt;logger name=&quot;com.baeldung&quot; level=&quot;INFO&quot; /&gt;</code></pre><p>Remember that <strong>if the log level for a package is defined multiple times</strong> using the different options mentioned above, but <strong>with different log levels, the lowest level will be used.</strong></p><div class=\'code-block code-block-5\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_1"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_1", slotId: "baeldung_incontent_1" });  </script></div></div><p>So, if we set the logging levels using Logback, Spring Boot, and environment variables at the same time, the log level will be <em>TRACE</em>, as it is the lowest among the requested levels.</p><h2 data-id="logback-configuration-logging"><strong>4. Logback Configuration Logging</strong></h2><div class="bd-anchor" id="logback-configuration-logging"></div><p>Even though the default configuration is useful (for example, to get started in zero time during POCs or quick experiments), it\'s most likely not enough for our daily needs.</p><p>Let\'s see <strong>how to include a Logback configuration</strong> with a different color and logging pattern, with separate specifications for <em>console</em> and <em>file</em> output, and with a decent <em>rolling policy</em> to avoid generating huge log files.</p><p>First, we should find a solution that allows for handling our logging settings alone instead of polluting <em>application.properties,</em> which is commonly used for many other application settings.</p><p><strong>When a file in the classpath has one of the following names, Spring Boot will automatically load it</strong> over the default configuration:</p><ul><li><em>logback-spring.xml</em></li><li><em>logback.xml</em></li><li><em>logback-spring.groovy</em></li><li><em>logback.groovy</em></li></ul><p><strong>Spring recommends using the <em>-spring</em> variant</strong> over the plain ones whenever possible, as described <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-custom-log-configuration">here</a>.</p><p>Let\'s write a simple <em>logback-spring.xml</em>:</p><pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt;    &lt;property name=&quot;LOGS&quot; value=&quot;./logs&quot; /&gt;    &lt;appender name=&quot;Console&quot;        class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;            &lt;Pattern&gt;                %black(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable            &lt;/Pattern&gt;        &lt;/layout&gt;    &lt;/appender&gt;    &lt;appender name=&quot;RollingFile&quot;        class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;        &lt;file&gt;{LOGS}/spring-boot-logger.log&lt;/file&gt;        &lt;encoder            class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;            &lt;Pattern&gt;%d %p %C{1.} [%t] %m%n&lt;/Pattern&gt;        &lt;/encoder&gt;        &lt;rollingPolicy            class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;            &lt;!-- rollover daily and when the file reaches 10 MegaBytes --&gt;            &lt;fileNamePattern&gt;{LOGS}/archived/spring-boot-logger-%d{yyyy-MM-dd}.%i.log            &lt;/fileNamePattern&gt;            &lt;timeBasedFileNamingAndTriggeringPolicy                class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;        &lt;/rollingPolicy&gt;    &lt;/appender&gt;    &lt;!-- LOG everything at INFO level --&gt;    &lt;root level=&quot;info&quot;&gt;        &lt;appender-ref ref=&quot;RollingFile&quot; /&gt;        &lt;appender-ref ref=&quot;Console&quot; /&gt;    &lt;/root&gt;    &lt;!-- LOG &quot;com.baeldung*&quot; at TRACE level --&gt;    &lt;logger name=&quot;com.baeldung&quot; level=&quot;trace&quot; additivity=&quot;false&quot;&gt;        &lt;appender-ref ref=&quot;RollingFile&quot; /&gt;        &lt;appender-ref ref=&quot;Console&quot; /&gt;    &lt;/logger&gt;&lt;/configuration&gt;</code></pre><p>And when we run the application, here\'s the output:</p><div class=\'code-block code-block-6\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_2"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_2", slotId: "baeldung_incontent_2" });  </script></div></div><p>&nbsp;</p><a href="/wp-content/uploads/2018/07/logback-custom-logging.png"><img loading="lazy" width="1024" height="576" class="aligncenter size-large wp-image-36070" src="/wp-content/uploads/2018/07/logback-custom-logging-1024x576.png" alt="" srcset="https://www.baeldung.com/wp-content/uploads/2018/07/logback-custom-logging-1024x576.png 1024w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-custom-logging-300x169.png 300w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-custom-logging-768x432.png 768w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-custom-logging-100x56.png 100w, https://www.baeldung.com/wp-content/uploads/2018/07/logback-custom-logging.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p>As we can see, it now logs <em>TRACE</em> and <em>DEBUG</em> messages, and the overall console pattern is both textually and chromatically different than before.</p><p>It also now logs on a file in a <em>/logs</em> folder created under the current path and archives it through a rolling policy.</p><h2 data-id="log4j2-configuration-logging"><strong>5. Log4j2 Configuration Logging</strong></h2><div class="bd-anchor" id="log4j2-configuration-logging"></div><p>While Apache Commons Logging is at the core, and Logback is the reference implementation provided, all the routings to the other logging libraries are already included to make it easy to switch to them.</p><p><strong>In order to use any logging library other than Logback, though, we need to exclude it from our dependencies.</strong></p><p>For every starter like this one (it\'s the only one in our example, but we could have many of them):</p><pre><code class="language-xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>we need to turn it into a skinny version, and (only once) add our alternative library, here through a starter itself:</p><pre><code class="language-xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>At this point, we need to place in the classpath a file named one of the following:</p><div class=\'code-block code-block-7\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_3"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_3", slotId: "baeldung_incontent_3" });  </script></div></div><ul><li>log4j2-spring.xml</li><li>log4j2.xml</li></ul><p>We\'ll print through Log4j2 (over SLF4J) without further modifications.</p><p>Let\'s write a simple <em>log4j2-spring.xml</em>:</p><pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Configuration&gt;    &lt;Appenders&gt;        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;            &lt;PatternLayout                pattern=&quot;%style{%d{ISO8601}}{black} %highlight{%-5level }[%style{%t}{bright,blue}] %style{%C{1.}}{bright,yellow}: %msg%n%throwable&quot; /&gt;        &lt;/Console&gt;        &lt;RollingFile name=&quot;RollingFile&quot;            fileName=&quot;./logs/spring-boot-logger-log4j2.log&quot;            filePattern=&quot;./logs/$${date:yyyy-MM}/spring-boot-logger-log4j2-%d{-dd-MMMM-yyyy}-%i.log.gz&quot;&gt;            &lt;PatternLayout&gt;                &lt;pattern&gt;%d %p %C{1.} [%t] %m%n&lt;/pattern&gt;            &lt;/PatternLayout&gt;            &lt;Policies&gt;                &lt;!-- rollover on startup, daily and when the file reaches                    10 MegaBytes --&gt;                &lt;OnStartupTriggeringPolicy /&gt;                &lt;SizeBasedTriggeringPolicy                    size=&quot;10 MB&quot; /&gt;                &lt;TimeBasedTriggeringPolicy /&gt;            &lt;/Policies&gt;        &lt;/RollingFile&gt;    &lt;/Appenders&gt;    &lt;Loggers&gt;        &lt;!-- LOG everything at INFO level --&gt;        &lt;Root level=&quot;info&quot;&gt;            &lt;AppenderRef ref=&quot;Console&quot; /&gt;            &lt;AppenderRef ref=&quot;RollingFile&quot; /&gt;        &lt;/Root&gt;        &lt;!-- LOG &quot;com.baeldung*&quot; at TRACE level --&gt;        &lt;Logger name=&quot;com.baeldung&quot; level=&quot;trace&quot;&gt;&lt;/Logger&gt;    &lt;/Loggers&gt;&lt;/Configuration&gt;</code></pre><p>And when we run the application, here\'s the output:</p><p>&nbsp;</p><a href="/wp-content/uploads/2018/07/log4j2-custom-logging.png"><img loading="lazy" width="1024" height="562" class="aligncenter size-large wp-image-36071" src="/wp-content/uploads/2018/07/log4j2-custom-logging-1024x562.png" alt="" srcset="https://www.baeldung.com/wp-content/uploads/2018/07/log4j2-custom-logging-1024x562.png 1024w, https://www.baeldung.com/wp-content/uploads/2018/07/log4j2-custom-logging-300x165.png 300w, https://www.baeldung.com/wp-content/uploads/2018/07/log4j2-custom-logging-768x421.png 768w, https://www.baeldung.com/wp-content/uploads/2018/07/log4j2-custom-logging-100x55.png 100w, https://www.baeldung.com/wp-content/uploads/2018/07/log4j2-custom-logging.png 1920w" sizes="(max-width: 1024px) 100vw, 1024px" /></a><p>As we can see, the output is quite different from the Logback one &#8212; a proof that we\'re fully using Log4j2 now.</p><p>In addition to the XML configuration, Log4j2 allows us to use also a YAML or JSON configuration, described <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-log4j-for-logging-yaml-or-json-config">here</a>.</p><h2 data-id="log4j2-without-slf4j"><strong>6. Log4j2 Without SLF4J</strong></h2><div class="bd-anchor" id="log4j2-without-slf4j"></div><p>We can also use Log4j2 natively, without passing through SLF4J.</p><p>In order to do that, we simply use the native classes:</p><div class=\'code-block code-block-8\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_4"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_4", slotId: "baeldung_incontent_4" });  </script></div></div><pre><code class="language-java">import org.apache.logging.log4j.Logger;import org.apache.logging.log4j.LogManager;// [...]Logger logger = LogManager.getLogger(LoggingController.class);</code></pre><p>We don\'t need to perform any other modification to the standard Log4j2 Spring Boot configuration.</p><p>We can now exploit the brand-new features of Log4j2 without getting stuck with the old SLF4J interface. But we\'re also tied to this implementation, and we\'ll need to rewrite our code when switching to another logging framework.</p><h2 data-id="logging-with-lombok">7. Logging With Lombok</h2><div class="bd-anchor" id="logging-with-lombok"></div><p>In the examples we\'ve seen<strong> so far, we\'ve had to declare an instance of a logger</strong> from our logging framework.</p><p>This boilerplate code can be annoying. We can avoid it using various annotations introduced by Lombok.</p><p>We\'ll first need to add the Lombok dependency in our build script to work with it:</p><pre><code class="language-xml">&lt;dependency&gt;    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;    &lt;artifactId&gt;lombok&lt;/artifactId&gt;    &lt;version&gt;1.18.20&lt;/version&gt;    &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;</code></pre><h3 data-id="1-slf4j-and-commonslog">7.1. <em>@Slf4j</em> and <em>@CommonsLog</em></h3><div class="bd-anchor" id="1-slf4j-and-commonslog"></div><p>SLF4J and Apache Commons Logging APIs allow us the flexibility to change our logging framework with no impact on our code.</p><p>And we can <strong>use Lombok\'s <em>@Slf4j</em> and <em>@CommonsLog</em> annotations</strong> to add the right logger instance into our class: <em>org.slf4j.Logger</em> for SLF4J and <em>org.apache.commons.logging.Log</em> for Apache Commons Logging.</p><p>To see these annotations in action, let\'s create a class similar to <em>LoggingController</em> but without a logger instance. We name it as <em>LombokLoggingController</em> and annotate it with <em>@Slf4j</em>:</p><div class=\'code-block code-block-9\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_5"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_5", slotId: "baeldung_incontent_5" });  </script></div></div><pre><code class="language-java">@RestController@Slf4jpublic class LombokLoggingController {    @RequestMapping(&quot;/lombok&quot;)    public String index() {        log.trace(&quot;A TRACE Message&quot;);        log.debug(&quot;A DEBUG Message&quot;);        log.info(&quot;An INFO Message&quot;);        log.warn(&quot;A WARN Message&quot;);        log.error(&quot;An ERROR Message&quot;);        return &quot;Howdy! Check out the Logs to see the output...&quot;;    }}</code></pre><p>Note that we\'ve adjusted the snippet just a bit, using <em>log</em> as our logger instance. This is because adding the annotation <em>@Slf4j</em> automatically adds a field named <em>log</em>.</p><p>With <strong>Zero-Configuration Logging</strong>,<strong> the application will use underlying logging implementation Logback</strong> for logging. Similarly, Log4j2 implementation is used for logging with Log4j2-Configuration Logging.</p><p>We get the same behavior when we replace the annotation <em>@Slf4j</em> with <em>@CommonsLog.</em></p><h3 data-id="2-log4j2">7.2. <em>@Log4j2</em></h3><div class="bd-anchor" id="2-log4j2"></div><p>We can use the annotation <em>@Log4j2 </em>to use Log4j2 directly. So, we make a simple change to <em>LombokLoggingController</em> to use <em>@Log4j2</em> instead of <em>@Slf4j</em> or <em>@CommonsLog</em>:</p><pre><code class="language-java">@RestController@Log4j2public class LombokLoggingController {    @RequestMapping(&quot;/lombok&quot;)    public String index() {        log.trace(&quot;A TRACE Message&quot;);        log.debug(&quot;A DEBUG Message&quot;);        log.info(&quot;An INFO Message&quot;);        log.warn(&quot;A WARN Message&quot;);        log.error(&quot;An ERROR Message&quot;);        return &quot;Howdy! Check out the Logs to see the output...&quot;;    }}</code></pre><p>Other than logging, there are other annotations from Lombok that help in keeping our code clean and tidy. More information about them is available in <a href="/intro-to-project-lombok">Introduction to Project Lombok</a>, and we also have a tutorial on <a href="/lombok-ide">Setting Up Lombok With Eclipse and IntelliJ</a>.</p><h2 data-id="beware-of-java-util-logging"><strong>8. Beware of Java Util Logging</strong></h2><div class="bd-anchor" id="beware-of-java-util-logging"></div><p>Spring Boot also supports JDK logging, through the <em>logging.properties</em> configuration file.</p><p>There are cases when it\'s not a good idea to use it, though. From <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-logging.html#boot-features-custom-log-configuration">the documentation</a>:</p><blockquote><p>There are known classloading issues with Java Util Logging that cause problems when running from an &#8216;executable jar\'. We recommend that you avoid it when running from an &#8216;executable jar\' if at all possible.</p></blockquote><p>It\'s also a good practice when using Spring 4 to manually exclude <em>commons-logging</em> in pom.xml, to avoid potential clashes between the logging libraries. Spring 5 instead handles it automatically, so we don\'t need to do anything when using Spring Boot 2.</p><div class=\'code-block code-block-10\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_6"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_6", slotId: "baeldung_incontent_6" });  </script></div></div><h2 data-id="jansi-on-windows"><strong>9. JANSI on Windows</strong></h2><div class="bd-anchor" id="jansi-on-windows"></div><p>While Unix-based operating systems such as Linux and Mac OS X support ANSI color codes by default, on a Windows console, everything will be sadly monochromatic.</p><p><strong>Windows can obtain ANSI colors through a library called JANSI.</strong></p><p><strong>We should pay attention to the possible class loading drawbacks, though.</strong></p><p>We must import and explicitly activate it in the configuration as follows:</p><p><a href="https://logback.qos.ch/manual/layouts.html#coloring">Logback</a>:</p><pre><code class="language-xml">&lt;configuration debug=&quot;true&quot;&gt;    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &lt;withJansi&gt;true&lt;/withJansi&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%thread] %highlight(%-5level) %cyan(%logger{15}) - %msg %n&lt;/pattern&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;!-- more stuff --&gt;&lt;/configuration&gt;</code></pre><p><a href="https://logging.apache.org/log4j/2.x/manual/layouts.html#enable-jansi">Log4j2</a>:</p><blockquote><p>ANSI escape sequences are supported natively on many platforms but are not by default on Windows. <strong>To enable ANSI support, add the Jansi jar to our application and set property <em>log4j.skipJansi</em> to <em>false</em>.</strong> This allows Log4j to use Jansi to add ANSI escape codes when writing to the console.</p><p>Note: Prior to Log4j 2.10, Jansi was enabled by default. The fact that Jansi requires native code means that <strong>Jansi can only be loaded by a single class loader</strong>. For web applications, this means <strong>the Jansi jar has to be in the web container\'s classpath.</strong> To avoid causing problems for web applications, Log4j no longer automatically tries to load Jansi without explicit configuration from Log4j 2.10 onward.</p></blockquote><p>It\'s also worth noting:</p><ul><li>The <a href="https://logging.apache.org/log4j/2.x/manual/layouts.html">layout</a> documentation page contains useful Log4j2 JANSI informations in the <strong><em>highlight{pattern}{style}</em></strong> section.</li><li>While JANSI can color the output, Spring Boot\'s Banner (native or customized through the <em>banner.txt</em> file) will stay monochromatic.</li></ul><h2 data-id="conclusion"><strong>10. Conclusion</strong></h2><div class="bd-anchor" id="conclusion"></div><p>We\'ve seen the main ways to interface with the major logging frameworks from within a Spring Boot project.</p><div class=\'code-block code-block-11\' style=\'margin: 8px 0; clear: both;\'><div align="center" data-freestar-ad="__336x280 __336x280" id="baeldung_incontent_7"><script data-cfasync="false" type="text/javascript">    freestar.config.enabled_slots.push({ placementName: "baeldung_incontent_7", slotId: "baeldung_incontent_7" });  </script></div></div><p>We also explored the main advantages and pitfalls of each solution.</p><p>As always, the full source code is available <a href="https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-logging-log4j2">over on GitHub</a>.</p><span id="tve_leads_end_content" style="display: block; visibility: hidden; border: 1px solid transparent;"></span><div class=\'after-post-widgets\'><div data-sticky-weight="1" data-height-limit="0" data-stickyness="sticky" data-geoloc-targets="" class="after-post-content-widget"><span style="display:none;">Generic bottom</span> <div class="textwidget"><div class="short_box short_end"><h3><b>Get started with Spring 5 and Spring Boot 2, through the <em>Learn Spring</em> course:</b></h3><strong><a href="/ls-course-end">&gt;&gt; CHECK OUT THE COURSE</a></strong></div></div></div></div><span style="display:none" class="tl-placeholder-f-type-post_footer"></span></section><div>Source: <a href="https://www.baeldung.com/spring-boot-logging">https://www.baeldung.com/spring-boot-logging</a></div></article>', 'In this short tutorial, we\'re going to explore the main logging options available in Spring Boot.Deeper information about Logback is avail', 0);


-- post_comments

INSERT INTO post_comments (post_id, user_id, time, text)
VALUES (2, 3, DATE_SUB(NOW(), INTERVAL 1 DAY), 'Good article, thanks'),
(2, 1, DATE_SUB(NOW(), INTERVAL 1 HOUR), 'Very useful article!'),
(3, 2, NOW(), 'Thanks for detailed manual of using H2 db with Spring Boot');

-- post_votes

INSERT INTO post_votes (user_id, post_id, time, value)
VALUES (1, 2, NOW(), 1),
(2, 2, NOW(), -1),
(3, 2, NOW(), 1),
(2, 3, NOW(), 1),
(1, 3, NOW(), 1),
(3, 3, NOW(), 1),
(2, 5, NOW(), 1),
(1, 5, NOW(), -1),
(3, 5, NOW(), -1),
(2, 6, NOW(), 1),
(1, 6, NOW(), 1);

-- tags

INSERT INTO tags (id, name)
VALUES (1, 'Java'),
(2, 'Java Persistence API'),
(3, 'Hibernate'),
(4, 'Spring Boot'),
(5, 'Spring Data JPA'),
(6, 'Logging'),
(7, 'Lombok');

-- tag2post

INSERT INTO tag2post (post_id, tag_id)
VALUES (1, 1),
(1, 2),
(1, 3),
(2, 1),
(2, 2),
(3, 1),
(3, 2),
(3, 4),
(4, 1),
(4, 2),
(4, 3),
(5, 1),
(5, 2),
(5, 4),
(5, 5),
(6, 1),
(6, 4),
(6, 6),
(6, 7);

